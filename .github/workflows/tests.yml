name: Lint and Test
on:
  push:
    branches-ignore: ['main']

jobs:
  repo_ids:
    runs-on: ubuntu-latest
    outputs:
      repo_name: ${{ steps.repo_ids.outputs.REPO_NAME }}
      org_name: ${{ steps.repo_ids.outputs.ORG_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get repository identifiers
        id: repo_ids
        run: |
          REPO_NAME=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')
          ORG_NAME=$(echo "${{ github.event.repository.owner.name }}" | tr '[:upper:]' '[:lower:]')
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_OUTPUT
          echo "ORG_NAME=$ORG_NAME" >> $GITHUB_OUTPUT

  lint:
    name: Run lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18.x
      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - name: Install Packages
        run: npm ci
      - name: Lint
        run: npm run lint

  dependency-check:
    name: Run dependency check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18.x
      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - name: Install Packages
        run: npm ci
      - name: Dependency Check
        run: npm run depcheck

  check-version:
    name: 'Check version'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check version
        id: get_version
        uses: digicatapult/check-version@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fail_on_same_version: false

  tests:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - name: Install Node Packages
        run: npm ci
      - name: Run unit tests
        run: npm run test:unit
      - name: Copy identity values to mountable .env files
        env:
          ALICE_DID: ${{ vars.ALICE_DID }}
          ALICE_PRIVATE_KEY: ${{ secrets.ALICE_PRIVATE_KEY}}
          BOB_DID: ${{ vars.BOB_DID }}
          BOB_PRIVATE_KEY: ${{ secrets.BOB_PRIVATE_KEY}}
          ISSUER_DID: ${{ vars.ISSUER_DID }}
          ISSUER_PRIVATE_KEY: ${{ secrets.ISSUER_PRIVATE_KEY}}
        run: |
          for persona in ALICE BOB ISSUER; do
            for varname in DID PRIVATE_KEY; do
              envvarname=${persona}_${varname}
              echo "${varname}=${!envvarname}" >> ".env.nice-agent-${persona,,}.local"
            done
          done
      - name: Setup dependencies
        run: npm run compose:up:deps:test
      - name: Run integration tests
        run: npm run test:integration
      - name: Clean up dependencies
        run: npm run compose:down:clean:all
      - name: Set up cluster
        run: npm run compose:up:test
      - name: Run end-to-end tests
        run: npm run test:e2e:wait4peers
        timeout-minutes: 2

  build-docker:
    name: 'Build docker image'
    runs-on: ubuntu-latest

    strategy:
      matrix:
        nice-agent-role: [peer, issuer]

    steps:
      - uses: actions/checkout@v4
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: '--debug'
      - name: Build image
        uses: docker/build-push-action@v5
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ${{ matrix.nice-agent-role }}.Dockerfile
          platforms: linux/amd64, linux/arm64
          push: false
